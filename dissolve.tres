[gd_resource type="VisualShader" load_steps=18 format=2]

[sub_resource type="VisualShaderNodeScalarUniform" id=2]
uniform_name = "Threshold"

[sub_resource type="VisualShaderNodeVectorDecompose" id=3]

[sub_resource type="VisualShaderNodeScalarFunc" id=4]
function = 14

[sub_resource type="VisualShaderNodeScalarOp" id=5]
operator = 8

[sub_resource type="VisualShaderNodeScalarOp" id=6]
default_input_values = [ 0, 1.0, 1, 0.0 ]
operator = 1

[sub_resource type="VisualShaderNodeScalarOp" id=7]
default_input_values = [ 0, 0.0, 1, 1.0 ]
operator = 7

[sub_resource type="VisualShaderNodeTextureUniform" id=8]
uniform_name = "TextureUniform"

[sub_resource type="VisualShaderNodeScalarOp" id=9]
operator = 1

[sub_resource type="VisualShaderNodeScalarUniform" id=10]
uniform_name = "Edge"

[sub_resource type="VisualShaderNodeVectorInterp" id=11]
output_port_for_preview = 0

[sub_resource type="VisualShaderNodeScalarFunc" id=12]
function = 14

[sub_resource type="VisualShaderNodeScalarOp" id=13]
default_input_values = [ 0, 0.0, 1, 1.0 ]
operator = 7

[sub_resource type="VisualShaderNodeScalarOp" id=14]
default_input_values = [ 0, 1.0, 1, 0.0 ]
operator = 1

[sub_resource type="VisualShaderNodeColorUniform" id=15]
uniform_name = "Edge2"

[sub_resource type="VisualShaderNodeColorConstant" id=16]
constant = Color( 0.180392, 0.180392, 0.180392, 1 )

[sub_resource type="VisualShaderNodeInput" id=17]
input_name = "uv"

[sub_resource type="VisualShaderNodeVectorInterp" id=18]
output_port_for_preview = 0

[resource]
code = "shader_type spatial;
uniform vec4 Edge2 : hint_color;
uniform sampler2D TextureUniform;
uniform float Threshold;
uniform float Edge;



void vertex() {
// Output:0

}

void fragment() {
// ColorUniform:28
	vec3 n_out28p0;
	float n_out28p1;
	n_out28p0 = Edge2.rgb;
	n_out28p1 = Edge2.a;

// Color:29
	vec3 n_out29p0;
	float n_out29p1;
	n_out29p0 = vec3(0.180392,0.180392,0.180392);
	n_out29p1 = 1.000000;

// Input:3
	vec3 n_out3p0;
	n_out3p0 = vec3(UV,0.0);

// TextureUniform:2
	vec3 n_out2p0;
	float n_out2p1;
	{
		vec4 n_tex_read = texture( TextureUniform , n_out3p0.xy );
		n_out2p0 = n_tex_read.rgb;
		n_out2p1 = n_tex_read.a;
	}

// VectorDecompose:11
	float n_out11p0;
	float n_out11p1;
	float n_out11p2;
	n_out11p0 = n_out2p0.x;
	n_out11p1 = n_out2p0.y;
	n_out11p2 = n_out2p0.z;

// ScalarUniform:10
	float n_out10p0;
	n_out10p0 = Threshold;

// ScalarOp:17
	float n_out17p0;
	n_out17p0 = atan( n_out11p0 , n_out10p0 );

// ScalarFunc:25
	float n_out25p0;
	n_out25p0 = floor(n_out17p0);

// ScalarOp:26
	float n_in26p1 = 1.00000;
	float n_out26p0;
	n_out26p0 = min( n_out25p0 , n_in26p1 );

// ScalarOp:27
	float n_in27p0 = 1.00000;
	float n_out27p0;
	n_out27p0 = n_in27p0 - n_out26p0;

// VectorInterp:30
	vec3 n_out30p0;
	n_out30p0 = mix( n_out28p0 , n_out29p0 , vec3(n_out27p0) );

// ScalarUniform:23
	float n_out23p0;
	n_out23p0 = Edge;

// ScalarOp:22
	float n_out22p0;
	n_out22p0 = n_out17p0 - n_out23p0;

// ScalarFunc:15
	float n_out15p0;
	n_out15p0 = floor(n_out22p0);

// ScalarOp:19
	float n_in19p1 = 1.00000;
	float n_out19p0;
	n_out19p0 = min( n_out15p0 , n_in19p1 );

// ScalarOp:18
	float n_in18p0 = 1.00000;
	float n_out18p0;
	n_out18p0 = n_in18p0 - n_out19p0;

// VectorInterp:24
	vec3 n_in24p1 = vec3(0.00000,0.00000,0.00000);
	vec3 n_out24p0;
	n_out24p0 = mix( n_out28p0 , n_in24p1 , vec3(n_out27p0) );

// Output:0
	ALBEDO = n_out30p0;
	ALPHA = n_out18p0;
	EMISSION = n_out24p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( 1524, -203.25 )
nodes/fragment/0/position = Vector2( 2164, 70 )
nodes/fragment/2/node = SubResource( 8 )
nodes/fragment/2/position = Vector2( 640, 40 )
nodes/fragment/3/node = SubResource( 17 )
nodes/fragment/3/position = Vector2( 460, -60 )
nodes/fragment/10/node = SubResource( 2 )
nodes/fragment/10/position = Vector2( 884, 218 )
nodes/fragment/11/node = SubResource( 3 )
nodes/fragment/11/position = Vector2( 852, 124 )
nodes/fragment/15/node = SubResource( 4 )
nodes/fragment/15/position = Vector2( 1544, 160 )
nodes/fragment/17/node = SubResource( 5 )
nodes/fragment/17/position = Vector2( 1076, 134 )
nodes/fragment/18/node = SubResource( 6 )
nodes/fragment/18/position = Vector2( 1962, 130 )
nodes/fragment/19/node = SubResource( 7 )
nodes/fragment/19/position = Vector2( 1784, 132 )
nodes/fragment/22/node = SubResource( 9 )
nodes/fragment/22/position = Vector2( 1296, 122 )
nodes/fragment/23/node = SubResource( 10 )
nodes/fragment/23/position = Vector2( 1070, 246 )
nodes/fragment/24/node = SubResource( 11 )
nodes/fragment/24/position = Vector2( 1920, -76 )
nodes/fragment/25/node = SubResource( 12 )
nodes/fragment/25/position = Vector2( 1312, 40 )
nodes/fragment/26/node = SubResource( 13 )
nodes/fragment/26/position = Vector2( 1534, 26 )
nodes/fragment/27/node = SubResource( 14 )
nodes/fragment/27/position = Vector2( 1726, -2 )
nodes/fragment/28/node = SubResource( 15 )
nodes/fragment/28/position = Vector2( 1676, -220 )
nodes/fragment/29/node = SubResource( 16 )
nodes/fragment/29/position = Vector2( 1915.5, -165.75 )
nodes/fragment/30/node = SubResource( 18 )
nodes/fragment/30/position = Vector2( 2120, -224 )
nodes/fragment/connections = PoolIntArray( 2, 0, 11, 0, 3, 0, 2, 0, 11, 0, 17, 0, 10, 0, 17, 1, 15, 0, 19, 0, 19, 0, 18, 1, 23, 0, 22, 1, 17, 0, 22, 0, 22, 0, 15, 0, 25, 0, 26, 0, 26, 0, 27, 1, 17, 0, 25, 0, 18, 0, 0, 1, 28, 0, 24, 0, 27, 0, 24, 2, 29, 0, 30, 1, 28, 0, 30, 0, 27, 0, 30, 2, 24, 0, 0, 5, 30, 0, 0, 0 )

